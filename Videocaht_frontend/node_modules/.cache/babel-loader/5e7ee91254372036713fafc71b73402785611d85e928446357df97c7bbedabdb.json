{"ast":null,"code":"import store from \"../app/store\";\nimport { setLocalStream, setRemoteStreams } from \"../app/actions/roomActions\";\nimport Peer from \"simple-peer\";\nimport * as socketConnection from \"./socketConnection\";\nconst getConfiguration = () => {\n  return {\n    iceServers: [{\n      urls: \"stun:relay.metered.ca:80\"\n    }, {\n      urls: \"turn:relay.metered.ca:80\",\n      username: \"156946092e2bbf8148f6bcb1\",\n      credential: \"mxhdwaMDKkkvEcQ4\"\n    }, {\n      urls: \"turn:relay.metered.ca:443\",\n      username: \"156946092e2bbf8148f6bcb1\",\n      credential: \"mxhdwaMDKkkvEcQ4\"\n    }, {\n      urls: \"turn:relay.metered.ca:443?transport=tcp\",\n      username: \"156946092e2bbf8148f6bcb1\",\n      credential: \"mxhdwaMDKkkvEcQ4\"\n    }]\n  };\n};\nconst onlyAudioConstraints = {\n  audio: true,\n  video: false\n};\nconst defaultConstraints = {\n  video: true,\n  audio: true\n};\nexport const getLocalStreamPreview = function () {\n  let onlyAudio = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  let callbackFunc = arguments.length > 1 ? arguments[1] : undefined;\n  const constraints = onlyAudio ? onlyAudioConstraints : defaultConstraints;\n  navigator.mediaDevices.getUserMedia(constraints).then(stream => {\n    store.dispatch(setLocalStream(stream));\n    callbackFunc();\n  }).catch(err => {\n    console.log(err);\n    console.log(\"Cannot get an access to local stream\");\n  });\n};\nlet peers = {};\nexport const prepareNewPeerConnection = (connUserSocketId, isInitiator) => {\n  const localStream = store.getState().room.localStream;\n  if (isInitiator) {\n    console.log(\"preparing new peer connection as initiator\");\n  } else {\n    console.log(\"preparing new peer connection as not initiator\");\n  }\n  peers[connUserSocketId] = new Peer({\n    initiator: isInitiator,\n    config: getConfiguration(),\n    stream: localStream\n  });\n  peers[connUserSocketId].on(\"signal\", data => {\n    const signalData = {\n      signal: data,\n      connUserSocketId: connUserSocketId\n    };\n    socketConnection.signalPeerData(signalData);\n  });\n  peers[connUserSocketId].on(\"stream\", remoteStream => {\n    // TODO\n    // add new remote stream to our server store\n    console.log(\"remote stream came from other user\");\n    console.log(\"direct connection has been established\");\n    remoteStream.connUserSocketId = connUserSocketId;\n    addNewRemoteStream(remoteStream);\n  });\n};\nexport const handleSignalingData = data => {\n  const {\n    connUserSocketId,\n    signal\n  } = data;\n  if (peers[connUserSocketId]) {\n    peers[connUserSocketId].signal(signal);\n  }\n};\nconst addNewRemoteStream = remoteStream => {\n  const remoteStreams = store.getState().room.remoteStreams;\n  const newRemoteStreams = [...remoteStreams, remoteStream];\n  store.dispatch(setRemoteStreams(newRemoteStreams));\n};\nexport const closeAllConnections = () => {\n  Object.entries(peers).forEach(mappedObject => {\n    const connUserSocketId = mappedObject[0];\n    if (peers[connUserSocketId]) {\n      peers[connUserSocketId].destroy();\n      delete peers[connUserSocketId];\n    }\n  });\n};\nexport const handleParticipantLeftRoom = data => {\n  const {\n    connUserSocketId\n  } = data;\n  if (peers[connUserSocketId]) {\n    peers[connUserSocketId].destroy();\n    delete peers[connUserSocketId];\n  }\n  const remoteStreams = store.getState().room.remoteStreams;\n  const newRemoteStreams = remoteStreams.filter(remoteStream => remoteStream.connUserSocketId !== connUserSocketId);\n  store.dispatch(setRemoteStreams(newRemoteStreams));\n};\nexport const switchOutgoingTracks = stream => {\n  for (let socket_id in peers) {\n    for (let index in peers[socket_id].streams[0].getTracks()) {\n      for (let index2 in stream.getTracks()) {\n        if (peers[socket_id].streams[0].getTracks()[index].kind === stream.getTracks()[index2].kind) {\n          peers[socket_id].replaceTrack(peers[socket_id].streams[0].getTracks()[index], stream.getTracks()[index2], peers[socket_id].streams[0]);\n          break;\n        }\n      }\n    }\n  }\n};","map":{"version":3,"names":["store","setLocalStream","setRemoteStreams","Peer","socketConnection","getConfiguration","iceServers","urls","username","credential","onlyAudioConstraints","audio","video","defaultConstraints","getLocalStreamPreview","onlyAudio","arguments","length","undefined","callbackFunc","constraints","navigator","mediaDevices","getUserMedia","then","stream","dispatch","catch","err","console","log","peers","prepareNewPeerConnection","connUserSocketId","isInitiator","localStream","getState","room","initiator","config","on","data","signalData","signal","signalPeerData","remoteStream","addNewRemoteStream","handleSignalingData","remoteStreams","newRemoteStreams","closeAllConnections","Object","entries","forEach","mappedObject","destroy","handleParticipantLeftRoom","filter","switchOutgoingTracks","socket_id","index","streams","getTracks","index2","kind","replaceTrack"],"sources":["D:/Đồ Án 1/New folder/Discord-clone/discord-frontend/src/realtimeCommunication/webRTCHandler.js"],"sourcesContent":["import store from \"../app/store\";\r\nimport { setLocalStream, setRemoteStreams } from \"../app/actions/roomActions\";\r\nimport Peer from \"simple-peer\";\r\nimport * as socketConnection from \"./socketConnection\";\r\n\r\nconst getConfiguration = () => {\r\n return {\r\n        iceServers: [\r\n            {\r\n              urls: \"stun:relay.metered.ca:80\",\r\n            },\r\n            {\r\n              urls: \"turn:relay.metered.ca:80\",\r\n              username: \"156946092e2bbf8148f6bcb1\",\r\n              credential: \"mxhdwaMDKkkvEcQ4\",\r\n            },\r\n            {\r\n              urls: \"turn:relay.metered.ca:443\",\r\n              username: \"156946092e2bbf8148f6bcb1\",\r\n              credential: \"mxhdwaMDKkkvEcQ4\",\r\n            },\r\n            {\r\n              urls: \"turn:relay.metered.ca:443?transport=tcp\",\r\n              username: \"156946092e2bbf8148f6bcb1\",\r\n              credential: \"mxhdwaMDKkkvEcQ4\",\r\n            },\r\n        ],\r\n      }\r\n};\r\n\r\nconst onlyAudioConstraints = {\r\n  audio: true,\r\n  video: false,\r\n};\r\n\r\nconst defaultConstraints = {\r\n  video: true,\r\n  audio: true,\r\n};\r\n\r\nexport const getLocalStreamPreview = (onlyAudio = false, callbackFunc) => {\r\n  const constraints = onlyAudio ? onlyAudioConstraints : defaultConstraints;\r\n\r\n  navigator.mediaDevices\r\n    .getUserMedia(constraints)\r\n    .then((stream) => {\r\n      store.dispatch(setLocalStream(stream));\r\n      callbackFunc();\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      console.log(\"Cannot get an access to local stream\");\r\n    });\r\n};\r\n\r\nlet peers = {};\r\n\r\nexport const prepareNewPeerConnection = (connUserSocketId, isInitiator) => {\r\n  const localStream = store.getState().room.localStream;\r\n\r\n  if (isInitiator) {\r\n    console.log(\"preparing new peer connection as initiator\");\r\n  } else {\r\n    console.log(\"preparing new peer connection as not initiator\");\r\n  }\r\n\r\n  peers[connUserSocketId] = new Peer({\r\n    initiator: isInitiator,\r\n    config: getConfiguration(),\r\n    stream: localStream,\r\n  });\r\n\r\n  peers[connUserSocketId].on(\"signal\", (data) => {\r\n    const signalData = {\r\n      signal: data,\r\n      connUserSocketId: connUserSocketId,\r\n    };\r\n\r\n    socketConnection.signalPeerData(signalData);\r\n  });\r\n\r\n  peers[connUserSocketId].on(\"stream\", (remoteStream) => {\r\n    // TODO\r\n    // add new remote stream to our server store\r\n    console.log(\"remote stream came from other user\");\r\n    console.log(\"direct connection has been established\");\r\n    remoteStream.connUserSocketId = connUserSocketId;\r\n    addNewRemoteStream(remoteStream);\r\n  });\r\n};\r\n\r\nexport const handleSignalingData = (data) => {\r\n  const { connUserSocketId, signal } = data;\r\n\r\n  if (peers[connUserSocketId]) {\r\n    peers[connUserSocketId].signal(signal);\r\n  }\r\n};\r\n\r\nconst addNewRemoteStream = (remoteStream) => {\r\n  const remoteStreams = store.getState().room.remoteStreams;\r\n  const newRemoteStreams = [...remoteStreams, remoteStream];\r\n\r\n  store.dispatch(setRemoteStreams(newRemoteStreams));\r\n};\r\n\r\nexport const closeAllConnections = () => {\r\n  Object.entries(peers).forEach((mappedObject) => {\r\n    const connUserSocketId = mappedObject[0];\r\n    if (peers[connUserSocketId]) {\r\n      peers[connUserSocketId].destroy();\r\n      delete peers[connUserSocketId];\r\n    }\r\n  });\r\n};\r\n\r\nexport const handleParticipantLeftRoom = (data) => {\r\n  const { connUserSocketId } = data;\r\n\r\n  if (peers[connUserSocketId]) {\r\n    peers[connUserSocketId].destroy();\r\n    delete peers[connUserSocketId];\r\n  }\r\n\r\n  const remoteStreams = store.getState().room.remoteStreams;\r\n\r\n  const newRemoteStreams = remoteStreams.filter(\r\n    (remoteStream) => remoteStream.connUserSocketId !== connUserSocketId\r\n  );\r\n\r\n  store.dispatch(setRemoteStreams(newRemoteStreams));\r\n};\r\n\r\nexport const switchOutgoingTracks = (stream) => {\r\n  for (let socket_id in peers) {\r\n    for (let index in peers[socket_id].streams[0].getTracks()) {\r\n      for (let index2 in stream.getTracks()) {\r\n        if (\r\n          peers[socket_id].streams[0].getTracks()[index].kind ===\r\n          stream.getTracks()[index2].kind\r\n        ) {\r\n          peers[socket_id].replaceTrack(\r\n            peers[socket_id].streams[0].getTracks()[index],\r\n            stream.getTracks()[index2],\r\n            peers[socket_id].streams[0]\r\n          );\r\n          break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}