{"ast":null,"code":"import { roomActions } from \"../actions/roomActions\";\nconst initState = {\n  isUserInRoom: false,\n  isUserRoomCreator: false,\n  roomDetails: null,\n  activeRooms: [],\n  localStream: null,\n  remoteStreams: [],\n  audioOnly: false,\n  screenSharingStream: null,\n  isScreenSharingActive: false,\n  isUserJoinedWithOnlyAudio: false\n};\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case roomActions.OPEN_ROOM:\n      return {\n        ...state,\n        isUserInRoom: action.isUserInRoom,\n        isUserRoomCreator: action.isUserRoomCreator\n      };\n    case roomActions.SET_ROOM_DETAILS:\n      return {\n        ...state,\n        roomDetails: action.roomDetails\n      };\n    case roomActions.SET_ACTIVE_ROOMS:\n      return {\n        ...state,\n        activeRooms: action.activeRooms\n      };\n    case roomActions.SET_LOCAL_STREAM:\n      return {\n        ...state,\n        localStream: action.localStream\n      };\n    case roomActions.SET_AUDIO_ONLY:\n      return {\n        ...state,\n        audioOnly: action.audioOnly\n      };\n    case roomActions.SET_REMOTE_STREAMS:\n      return {\n        ...state,\n        remoteStreams: action.remoteStreams\n      };\n    case roomActions.SET_SCREEN_SHARE_STREAM:\n      return {\n        ...state,\n        screenSharingStream: action.screenSharingStream,\n        isScreenSharingActive: action.isScreenSharingActive\n      };\n    case roomActions.SET_IS_USER_JOINED_WITH_ONLY_AUDIO:\n      return {\n        ...state,\n        isUserJoinedWithOnlyAudio: action.isUserJoinedWithOnlyAudio\n      };\n    default:\n      return state;\n  }\n};\nexport default reducer;","map":{"version":3,"names":["roomActions","initState","isUserInRoom","isUserRoomCreator","roomDetails","activeRooms","localStream","remoteStreams","audioOnly","screenSharingStream","isScreenSharingActive","isUserJoinedWithOnlyAudio","reducer","state","arguments","length","undefined","action","type","OPEN_ROOM","SET_ROOM_DETAILS","SET_ACTIVE_ROOMS","SET_LOCAL_STREAM","SET_AUDIO_ONLY","SET_REMOTE_STREAMS","SET_SCREEN_SHARE_STREAM","SET_IS_USER_JOINED_WITH_ONLY_AUDIO"],"sources":["D:/Đồ Án 1/New folder/Discord-clone/discord-frontend/src/app/reducers/roomReducer.js"],"sourcesContent":["import { roomActions } from \"../actions/roomActions\";\r\n\r\nconst initState = {\r\n  isUserInRoom: false,\r\n  isUserRoomCreator: false,\r\n  roomDetails: null,\r\n  activeRooms: [],\r\n  localStream: null,\r\n  remoteStreams: [],\r\n  audioOnly: false,\r\n  screenSharingStream: null,\r\n  isScreenSharingActive: false,\r\n  isUserJoinedWithOnlyAudio: false,\r\n};\r\n\r\nconst reducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case roomActions.OPEN_ROOM:\r\n      return {\r\n        ...state,\r\n        isUserInRoom: action.isUserInRoom,\r\n        isUserRoomCreator: action.isUserRoomCreator,\r\n      };\r\n    case roomActions.SET_ROOM_DETAILS:\r\n      return {\r\n        ...state,\r\n        roomDetails: action.roomDetails,\r\n      };\r\n    case roomActions.SET_ACTIVE_ROOMS:\r\n      return {\r\n        ...state,\r\n        activeRooms: action.activeRooms,\r\n      };\r\n    case roomActions.SET_LOCAL_STREAM:\r\n      return {\r\n        ...state,\r\n        localStream: action.localStream,\r\n      };\r\n    case roomActions.SET_AUDIO_ONLY:\r\n      return {\r\n        ...state,\r\n        audioOnly: action.audioOnly,\r\n      };\r\n    case roomActions.SET_REMOTE_STREAMS:\r\n      return {\r\n        ...state,\r\n        remoteStreams: action.remoteStreams,\r\n      };\r\n    case roomActions.SET_SCREEN_SHARE_STREAM:\r\n      return {\r\n        ...state,\r\n        screenSharingStream: action.screenSharingStream,\r\n        isScreenSharingActive: action.isScreenSharingActive,\r\n      };\r\n    case roomActions.SET_IS_USER_JOINED_WITH_ONLY_AUDIO:\r\n      return {\r\n        ...state,\r\n        isUserJoinedWithOnlyAudio: action.isUserJoinedWithOnlyAudio,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,wBAAwB;AAEpD,MAAMC,SAAS,GAAG;EAChBC,YAAY,EAAE,KAAK;EACnBC,iBAAiB,EAAE,KAAK;EACxBC,WAAW,EAAE,IAAI;EACjBC,WAAW,EAAE,EAAE;EACfC,WAAW,EAAE,IAAI;EACjBC,aAAa,EAAE,EAAE;EACjBC,SAAS,EAAE,KAAK;EAChBC,mBAAmB,EAAE,IAAI;EACzBC,qBAAqB,EAAE,KAAK;EAC5BC,yBAAyB,EAAE;AAC7B,CAAC;AAED,MAAMC,OAAO,GAAG,SAAAA,CAAA,EAA+B;EAAA,IAA9BC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGb,SAAS;EAAA,IAAEgB,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACxC,QAAQC,MAAM,CAACC,IAAI;IACjB,KAAKlB,WAAW,CAACmB,SAAS;MACxB,OAAO;QACL,GAAGN,KAAK;QACRX,YAAY,EAAEe,MAAM,CAACf,YAAY;QACjCC,iBAAiB,EAAEc,MAAM,CAACd;MAC5B,CAAC;IACH,KAAKH,WAAW,CAACoB,gBAAgB;MAC/B,OAAO;QACL,GAAGP,KAAK;QACRT,WAAW,EAAEa,MAAM,CAACb;MACtB,CAAC;IACH,KAAKJ,WAAW,CAACqB,gBAAgB;MAC/B,OAAO;QACL,GAAGR,KAAK;QACRR,WAAW,EAAEY,MAAM,CAACZ;MACtB,CAAC;IACH,KAAKL,WAAW,CAACsB,gBAAgB;MAC/B,OAAO;QACL,GAAGT,KAAK;QACRP,WAAW,EAAEW,MAAM,CAACX;MACtB,CAAC;IACH,KAAKN,WAAW,CAACuB,cAAc;MAC7B,OAAO;QACL,GAAGV,KAAK;QACRL,SAAS,EAAES,MAAM,CAACT;MACpB,CAAC;IACH,KAAKR,WAAW,CAACwB,kBAAkB;MACjC,OAAO;QACL,GAAGX,KAAK;QACRN,aAAa,EAAEU,MAAM,CAACV;MACxB,CAAC;IACH,KAAKP,WAAW,CAACyB,uBAAuB;MACtC,OAAO;QACL,GAAGZ,KAAK;QACRJ,mBAAmB,EAAEQ,MAAM,CAACR,mBAAmB;QAC/CC,qBAAqB,EAAEO,MAAM,CAACP;MAChC,CAAC;IACH,KAAKV,WAAW,CAAC0B,kCAAkC;MACjD,OAAO;QACL,GAAGb,KAAK;QACRF,yBAAyB,EAAEM,MAAM,CAACN;MACpC,CAAC;IACH;MACE,OAAOE,KAAK;EAAC;AAEnB,CAAC;AAED,eAAeD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}